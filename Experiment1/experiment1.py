# -*- coding: utf-8 -*-
"""Experiment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4_1JAr2aO6rMlo_p4w2ICOxN_nHMrnC
"""

import matplotlib.pyplot as plt

def bytes_to_int(b):
    n = 0
    shift = 0
    for byte in b:
        n = n | (byte<<shift)
        shift += 8
    return n

def read_bmp(filename):
    if filename[-4:] != '.bmp':
        print("Given file is not .bmp file")
        return
    bmp_data=open(filename,'rb')

    bmp_header=dict()

    # read the bmp header
    bmp_header['type'] = bmp_data.read(2).decode()
    if bmp_header['type'] != 'BM':
        print("Given file is not .bmp file")
        return
    bmp_header['size_bytes'] = bytes_to_int(bmp_data.read(4))
    bmp_header['reserved_1'] = bytes_to_int(bmp_data.read(2))
    bmp_header['reserved_2'] = bytes_to_int(bmp_data.read(2))
    bmp_header['offset'] = bytes_to_int(bmp_data.read(4))
    bmp_header['dib_header_size'] = bytes_to_int(bmp_data.read(4))
    bmp_header['width_pixels'] = bytes_to_int(bmp_data.read(4))
    bmp_header['height_pixels'] = bytes_to_int(bmp_data.read(4))
    bmp_header['colour_planes'] = bytes_to_int(bmp_data.read(2))
    bmp_header['bits_per_pixel'] = bytes_to_int(bmp_data.read(2))
    bmp_header['compression_method'] = bytes_to_int(bmp_data.read(4))
    bmp_header['raw_image_size_bytes'] = bytes_to_int(bmp_data.read(4))
    bmp_header['horizontal_resolution'] = bytes_to_int(bmp_data.read(4))
    bmp_header['vertical_resolution'] = bytes_to_int(bmp_data.read(4))
    bmp_header['num_colors'] = bytes_to_int(bmp_data.read(4))
    bmp_header['important_colors'] = bytes_to_int(bmp_data.read(4))

    # read the color table
    bmp_header['color_table'] = []
    for i in range(bmp_header['num_colors']):
        bmp_header['color_table'].append(bytes_to_int(bmp_data.read(4)))

    # set file pointer to where pixel array data is stores
    bmp_data.seek(bmp_header['offset'])
    
    # pixel array has size height x width x 3
    pixel_array = [[[0 for ___ in range(3)] for _ in range(bmp_header['width_pixels'])] for __ in range(bmp_header['height_pixels'])]

    # read pixel array from bmp file    
    for i in range(len(pixel_array)):
        for j in range(len(pixel_array[0])):
            if bmp_header['num_colors'] != 0:
                bmp_data.seek(bmp_header['offset'] + i*len(pixel_array[0]) + j)
                index = bytes_to_int(bmp_data.read(1))
                bmp_data.seek(54 + index*4)
            for x in range(3):
                pixel_array[len(pixel_array)-1-i][j][2-x] = bytes_to_int(bmp_data.read(1))
    bmp_data.close()
    
    return bmp_header, pixel_array

def int_to_bytes(n, num_bytes):
    b = []
    for i in range(num_bytes):
        b.append(n & 0xff)
        n >>= 8
    b = bytearray(b)
    return b

def write_bmp(filename, bmp_header, pixel_array):
    bmp_data = open(filename, 'wb') 

    # bmp header is passed as dictionary and written to output file in appropriate header format
    bmp_data.write(bmp_header['type'].encode())
    bmp_data.write(int_to_bytes(bmp_header['size_bytes'], 4))
    bmp_data.write(int_to_bytes(bmp_header['reserved_1'], 2))
    bmp_data.write(int_to_bytes(bmp_header['reserved_2'], 2))
    bmp_data.write(int_to_bytes(bmp_header['offset'], 4))
    bmp_data.write(int_to_bytes(bmp_header['dib_header_size'], 4))
    bmp_data.write(int_to_bytes(bmp_header['width_pixels'], 4))
    bmp_data.write(int_to_bytes(bmp_header['height_pixels'], 4))
    bmp_data.write(int_to_bytes(bmp_header['colour_planes'], 2))
    bmp_data.write(int_to_bytes(bmp_header['bits_per_pixel'], 2))
    bmp_data.write(int_to_bytes(bmp_header['compression_method'], 4))
    bmp_data.write(int_to_bytes(bmp_header['raw_image_size_bytes'], 4))
    bmp_data.write(int_to_bytes(bmp_header['horizontal_resolution'], 4))
    bmp_data.write(int_to_bytes(bmp_header['vertical_resolution'], 4))
    bmp_data.write(int_to_bytes(bmp_header['num_colors'], 4))
    bmp_data.write(int_to_bytes(bmp_header['important_colors'], 4))

    #write the color table and store index of each color in table
    color_index = dict()
    for i in range(bmp_header['num_colors']):
        bmp_data.write(int_to_bytes(bmp_header['color_table'][i], 4))  
        color_index[bmp_header['color_table'][i]] = i

    bmp_data.seek(bmp_header['offset'])   

    for i in range(len(pixel_array)):
        for j in range(len(pixel_array[0])):
            red = pixel_array[len(pixel_array)-1-i][j][0]
            green = pixel_array[len(pixel_array)-1-i][j][1]
            blue = pixel_array[len(pixel_array)-1-i][j][2]

            # if color table exists, get index of current pixel color and write index in place of pixel data
            # else write 24-bit BGR format data
            if bmp_header['num_colors'] != 0:
                bmp_data.write(int_to_bytes(color_index[blue | (green<<8) | (red<<16)], 1))
            else:
                bmp_data.write(int_to_bytes(blue | (green<<8) | (red<<16), 3))


    bmp_data.close()

def manipulate_channel(filename, remove_color):
    bmp_header, pixel_array = read_bmp(filename)

    if remove_color == 'r':
        mask = 0x0000ffff
    elif remove_color == 'g':
        mask = 0x00ff00ff
    elif remove_color == 'b':
        mask = 0x00ffff00
    else:
        mask = -1

    color_index = dict()
    for i in range(bmp_header['num_colors']):
        bmp_header['color_table'][i] &= mask # apply the mask on color to remove particular channel
        color_index[bmp_header['color_table'][i]] = i
    
    for i in range(len(pixel_array)):
        for j in range(len(pixel_array[0])):
            if remove_color == 'r':
                pixel_array[i][j][0] = 0
            elif remove_color == 'g':
                pixel_array[i][j][1] = 0
            elif remove_color == 'b':
                pixel_array[i][j][2] = 0

    write_bmp('output/'+filename.split('/')[-1][:-4]+'_without_'+remove_color+'.bmp', bmp_header, pixel_array)

def display_bmp(bmp_header, pixel_array):
    for key,value in bmp_header.items():
        if key!='color_table':
            print(str(key)+" : "+str(value))

    plt.imshow(pixel_array)
    plt.show()

print("1. Read bmp")
print("2. Write bmp")
print("3. Manipulate color channel")
ch = input("Enter choice (1,2,3): ")

if ch == '1':
    filename = input("Enter path of file to be read (*.bmp): ")
    bmp_header, pixel_array = read_bmp(filename)
    display_bmp(bmp_header, pixel_array)
elif ch == '2':
    filename = input("Enter path of file to be read (*.bmp): ")
    bmp_header, pixel_array = read_bmp(filename)
    output_filename = input("Enter path of file with which you want to save (*.bmp): ")
    write_bmp(output_filename, bmp_header, pixel_array)
    bmp_header, pixel_array = read_bmp(output_filename)
    display_bmp(bmp_header, pixel_array)
else:
    filename = input("Enter path of file to be read (*.bmp): ")
    remove_color = input("Enter color to be removed (r,g,b): ")
    manipulate_channel(filename, remove_color)
    bmp_header, pixel_array = read_bmp('output/'+filename.split('/')[-1][:-4]+'_without_'+remove_color+'.bmp')
    print('Manipulated image saved as '+'output/'+filename.split('/')[-1][:-4]+'_without_'+remove_color+'.bmp')
    display_bmp(bmp_header, pixel_array)